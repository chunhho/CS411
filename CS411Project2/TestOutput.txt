

int [Shift][Reduce 14]
fact [Shift]
( [Shift]
int [Shift][Reduce 14]
x [Shift][Reduce 12][Reduce 24]
) [Reduce 22][Shift]
{ [Shift][Reduce 9]

if [Reduce 43][Shift]
( [Shift]
x [Shift]
> [Reduce 86][Reduce 66][Shift]
1 [Shift][Reduce 95][Reduce 65]
) [Reduce 77][Shift]
return [Shift]
x [Shift]
* [Reduce 86][Reduce 66][Shift]
fact [Shift]
( [Shift]
x [Shift]
- [Reduce 86][Reduce 66][Shift]
1 [Shift][Reduce 95][Reduce 65]
) [Reduce 70][Reduce 62][Reduce 94][Shift][Reduce 90][Reduce 67][Reduce 71]
; [Reduce 54][Shift][Reduce 60][Reduce 50]

else [Shift]
return [Shift]
1 [Shift][Reduce 95][Reduce 65]
; [Reduce 54][Shift][Reduce 60][Reduce 50][Reduce 56][Reduce 46][Reduce 44]

} [Shift][Reduce 42][Reduce 20][Reduce 6][Reduce 3]

void [Shift]
main [Shift]
( [Shift]
) [Reduce 23][Shift]
{ [Shift][Reduce 9]

int [Shift][Reduce 14]
x [Shift][Reduce 12]
; [Shift][Reduce 11][Reduce 10]

int [Shift][Reduce 14]
total [Shift][Reduce 12]
; [Shift][Reduce 11][Reduce 10]

println [Reduce 43][Shift]
( [Shift]
"factorial of 10 is " [Shift][Reduce 97][Reduce 65]
, [Reduce 62][Shift]
fact [Shift]
( [Shift]
10 [Shift][Reduce 95][Reduce 65]
) [Reduce 62][Reduce 94][Shift][Reduce 90][Reduce 67]
, [Reduce 63][Shift]
" from the recursive function" [Shift][Reduce 97][Reduce 65]
) [Reduce 63][Shift]
; [Shift][Reduce 61][Reduce 51][Reduce 44]

total [Shift]
= [Reduce 86][Shift]
1 [Shift][Reduce 95][Reduce 65]
; [Reduce 64][Reduce 54][Shift][Reduce 45][Reduce 44]
x [Shift]
= [Reduce 86][Shift]
1 [Shift][Reduce 95][Reduce 65]
; [Reduce 64][Reduce 54][Shift][Reduce 45][Reduce 44]

for [Shift]
( [Shift]
; [Reduce 53][Shift]
x [Shift]
<= [Reduce 86][Reduce 66][Shift]
10 [Shift][Reduce 95][Reduce 65]
; [Reduce 76][Shift]
) [Reduce 53][Shift]
{ [Shift][Reduce 9]
total [Shift]
= 
[Reject]
